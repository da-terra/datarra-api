{"version":3,"sources":["../node_modules/@apollo/react-hooks/lib/react-hooks.esm.js","components/blocks/index.tsx","pages/Content/Content.tsx","pages/Content/index.ts"],"names":["OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","bind","treeRenderingInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","observableQueryFields","currentResult","partial","errors","length","graphQLErrors","partialRefetch","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","updatedOptions","queryDataRef","current","queryData","memoFn","key","ref","value","useDeepMemo","queryResult","useQuery","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","useMutation","mutationDataRef","mutationData","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info","blocksMap","React","BlockRenderer","blocks","map","block","Component","Error","contentQuery","ErrorPage","ContentPage","useParams","slug","target","useContext","Context","getValue","StorageKey","TargetGroup","useMemo","apolloError","SplashScreen","page","parse"],"mappings":"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","file":"static/js/18.7f821a13.chunk.js","sourcesContent":["import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.forceUpdate();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _this = this;\n\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n      setTimeout(function () {\n        _this.currentObservable.query && _this.currentObservable.query.resetQueryStoreErrors();\n      });\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var treeRenderingInitiated = this.context && this.context.renderPromises;\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined\n    };\n\n    if (ssrDisabled && (treeRenderingInitiated || fetchDisabled)) {\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (treeRenderingInitiated) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.context && this.context.renderPromises && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.context && this.context.renderPromises) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.forceUpdate();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery) return;\n\n    var _a = obsQuery.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","import React, { Fragment } from \"react\";\r\n\r\nconst blocksMap: Record<\r\n  string,\r\n  React.LazyExoticComponent<React.FunctionComponent<any>>\r\n> = {\r\n  \"c1-footer\": React.lazy(() => import(\"./Footer\")),\r\n  \"c2-hero\": React.lazy(() => import(\"./Hero\")),\r\n  \"c3-articles-list\": React.lazy(() => import(\"./ArticlesList\")),\r\n  \"c4-call-to-action\": React.lazy(() => import(\"./CallToAction\")),\r\n  \"c5-featured-events\": React.lazy(() => import(\"./FeaturedEvents\")),\r\n  \"c6-partners\": React.lazy(() => import(\"./Partners\")),\r\n  \"c7-header\": React.lazy(() => import(\"./Header\")),\r\n  \"c8-quickscan-profile-hero\": React.lazy(() =>\r\n    import(\"./QuickscanProfileHero\")\r\n  ),\r\n  \"c9-quickscan-profile-sidebar\": React.lazy(() =>\r\n    import(\"./QuickscanProfileSidebar\")\r\n  ),\r\n  \"c10-quickscan-profile-body\": React.lazy(() =>\r\n    import(\"./QuickscanProfileBody\")\r\n  ),\r\n  \"c11-rich-text\": React.lazy(() => import(\"./RichText\"))\r\n};\r\n\r\ntype BlockRendererProps = {\r\n  blocks: { type: string; data: any }[];\r\n  context?: any;\r\n};\r\n\r\nconst BlockRenderer: React.FC<BlockRendererProps> = ({ blocks, context }) => (\r\n  <Fragment>\r\n    {blocks.map(block => {\r\n      const Component = blocksMap[block.type];\r\n\r\n      if (!Component) {\r\n        throw new Error(`Block ${block.type} does not exist`);\r\n      }\r\n\r\n      return <Component {...context} {...block.data} key={block.type} />;\r\n    })}\r\n  </Fragment>\r\n);\r\n\r\nexport default BlockRenderer;\r\n","import React, { useContext, useMemo } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { loader } from \"graphql.macro\";\r\nimport { Context, StorageKey } from \"../../components/context/StorageManager\";\r\nimport { BlockRenderer, SplashScreen } from \"./styled\";\r\n\r\nconst contentQuery = loader(\"./content.graphql\");\r\n\r\nconst ErrorPage = React.lazy(() => import(\"../Error\"));\r\n\r\nconst ContentPage: React.FC = () => {\r\n  const { slug = \"homepage\" } = useParams();\r\n  const storage = useContext(Context);\r\n\r\n  const target = storage.getValue(StorageKey.TargetGroup);\r\n\r\n  const variables = useMemo(\r\n    () => ({\r\n      slug,\r\n      target\r\n    }),\r\n    [slug, target]\r\n  );\r\n\r\n  const { loading, data, error } = useQuery(contentQuery, { variables });\r\n\r\n  if (error) {\r\n    return <ErrorPage apolloError={error} />;\r\n  }\r\n\r\n  if (loading) {\r\n    return <SplashScreen />;\r\n  }\r\n\r\n  const blocks = data.page.blocks.map(JSON.parse);\r\n\r\n  return <BlockRenderer blocks={blocks} />;\r\n};\r\n\r\nexport default ContentPage;\r\n","export { default } from \"./Content\";\r\n"],"sourceRoot":""}