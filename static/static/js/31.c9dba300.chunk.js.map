{"version":3,"sources":["components/Chart/Pie.tsx","components/Chart/Slices.tsx","components/Chart/Slice.tsx","components/Chart/PieLegend.tsx","pages/Settings/Settings.tsx","pages/Settings/index.ts"],"names":["PieContext","React","createContext","progress","total","hue","slices","Pie","children","Provider","value","Slices","hueShift","props","pieContext","useContext","Children","forEach","child","viewBox","transform","fullCircle","Math","PI","getCoordinatesForPercentage","percentage","cos","sin","Slice","fill","label","startX","startY","percentageValue","endX","endY","largeArcFlag","fillColor","push","color","shape","d","List","styled","ul","ListItem","li","Legend","list","listItem","ListComponent","ListItemComponent","listItems","map","key","MyStyledPie","div","Settings","PieLegend"],"mappings":"4LASaA,EAAaC,IAAMC,cAA8B,CAC5DC,SAAU,EACVC,MAAO,EAGPC,IAAK,EAGLC,OAAQ,KAoBKC,EAbiB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAyB,4BAQ1D,OACE,kBAACR,EAAWS,SAAZ,CAAqBC,MARF,CACnBP,SAAU,EACVC,MAAO,EACPC,IAAK,EACLC,OAAQ,KAImCE,ICDhCG,EAxBuB,SAAC,GAAsC,IAApCH,EAAmC,EAAnCA,SAAUI,EAAyB,EAAzBA,SAAaC,EAAY,uCACpEC,EAAaC,qBAAWf,GAE1BY,IACFE,EAAWT,IAAMO,GAInB,IAAIR,EAAQ,EASZ,OAPAH,IAAMe,SAASC,QACbT,GACA,SAACU,GAAD,OAAiBd,GAASc,EAAML,MAAMH,SAGxCI,EAAWV,MAAQA,EAGjB,uCAAKe,QAAQ,aAAgBN,GAC3B,uBAAGO,UAAU,eAAeZ,K,QClB5Ba,EAAa,EAAIC,KAAKC,GAEtBC,EAA8B,SAACC,GAAD,MAAwB,CAC1DH,KAAKI,IAAIL,EAAaI,GACtBH,KAAKK,IAAIN,EAAaI,KAgDTG,EA7CqB,SAAC,GAM9B,IALLlB,EAKI,EALJA,MACAmB,EAII,EAJJA,KACAC,EAGI,EAHJA,MAEGjB,GACC,EAFJL,SAEI,oDACEM,EAAaC,qBAAWf,GAD1B,EAIqBwB,EAA4BV,EAAWX,UAJ5D,mBAIG4B,EAJH,KAIWC,EAJX,KAMEC,EAAkBvB,EAAQI,EAAWV,MAG3CU,EAAWX,UAAY8B,EATnB,MAYiBT,EAA4BV,EAAWX,UAZxD,mBAYG+B,EAZH,KAYSC,EAZT,KAeEC,EAAeH,EAAkB,GAAM,EAAI,EAGjDnB,EAAWT,KAAyB,IAAlB4B,EAGlB,IAAMI,EAAYR,GAAI,cAAWf,EAAWT,IAAtB,gBAGtBS,EAAWR,OAAOgC,KAAK,CACrBC,MAAOF,EACPP,UAIF,IAAMU,EAAK,YAAQT,EAAR,YAAkBC,EAAlB,oBAAoCI,EAApC,cAAsDF,EAAtD,YAA8DC,EAA9D,UAEX,OACE,0CAAUtB,EAAV,CAAiBgB,KAAMQ,EAAWI,EAAGD,IACnC,+BAAQV,K,sdC/Cd,IAAMY,EAAOC,IAAOC,GAAV,KAKJC,EAAWF,IAAOG,GAAV,KAcI,SAAAjC,GAAK,OAAIA,EAAM0B,SAuBlBQ,EAnBuB,SAAC,GAIjC,EAHJvC,SAGK,IAAD,IAFJwC,YAEI,MAFGN,EAEH,MADJO,SAEMC,EAAgBF,EAChBG,OAFF,MADON,EACP,EAMEO,EAFarC,qBAAWf,GAEDM,OAAO+C,KAAI,gBAAGd,EAAH,EAAGA,MAAOT,EAAV,EAAUA,MAAV,OACtC,kBAACqB,EAAD,CAAmBZ,MAAOA,EAAOe,IAAKxB,GACnCA,MAIL,OAAO,kBAACoB,EAAD,KAAgBE,I,kMC5CzB,IAAMG,EAAcZ,IAAOa,IAAV,KA4BFC,EAlBY,WACzB,OACE,kBAAC,EAAD,KACE,kBAACF,EAAD,KACE,kBAAC,EAAD,CAAQ3C,SAAU,KAChB,kBAAC,EAAD,CAAOF,MAAO,EAAGoB,MAAM,cACvB,kBAAC,EAAD,CAAOpB,MAAO,EAAGoB,MAAM,cACvB,kBAAC,EAAD,CAAOpB,MAAO,EAAGoB,MAAM,cACvB,kBAAC,EAAD,CAAOpB,MAAO,EAAGoB,MAAM,cACvB,kBAAC,EAAD,CAAOpB,MAAO,EAAGoB,MAAM,eAIzB,kBAAC4B,EAAD,SC3BR","file":"static/js/31.c9dba300.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype PieContextType = {\r\n  progress: number;\r\n  total: number;\r\n  hue: number;\r\n  slices: { color: string; label: string }[];\r\n};\r\n\r\nexport const PieContext = React.createContext<PieContextType>({\r\n  progress: 0,\r\n  total: 1,\r\n\r\n  // Keep track of hue for fill color of slices\r\n  hue: 0,\r\n\r\n  // List of slices that are rendered\r\n  slices: []\r\n});\r\n\r\ntype PieProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst Pie: React.FC<PieProps> = ({ children, ...props }) => {\r\n  const contextValue = {\r\n    progress: 0,\r\n    total: 0,\r\n    hue: 0,\r\n    slices: []\r\n  };\r\n\r\n  return (\r\n    <PieContext.Provider value={contextValue}>{children}</PieContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Pie;\r\n","import React, { useContext } from \"react\";\r\nimport { PieContext } from \"./Pie\";\r\n\r\ntype SlicesProps = {\r\n  children: React.ReactNode[];\r\n  hueShift?: number;\r\n};\r\n\r\nconst Slices: React.FC<SlicesProps> = ({ children, hueShift, ...props }) => {\r\n  const pieContext = useContext(PieContext);\r\n\r\n  if (hueShift) {\r\n    pieContext.hue = hueShift;\r\n  }\r\n\r\n  // Sum slice values to get total value for slice\r\n  let total = 0;\r\n\r\n  React.Children.forEach(\r\n    children,\r\n    (child: any) => (total += child.props.value)\r\n  );\r\n\r\n  pieContext.total = total;\r\n\r\n  return (\r\n    <svg viewBox=\"-1 -1 2 2\" {...props}>\r\n      <g transform=\"rotate(-90)\">{children}</g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Slices;\r\n","import React, { useContext } from \"react\";\r\nimport { PieContext } from \"./Pie\";\r\n\r\nexport type SliceProps = {\r\n  value: number;\r\n  label: string;\r\n  fill?: string;\r\n};\r\n\r\nconst fullCircle = 2 * Math.PI;\r\n\r\nconst getCoordinatesForPercentage = (percentage: number) => [\r\n  Math.cos(fullCircle * percentage),\r\n  Math.sin(fullCircle * percentage)\r\n];\r\n\r\nconst Slice: React.FC<SliceProps> = ({\r\n  value,\r\n  fill,\r\n  label,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const pieContext = useContext(PieContext);\r\n\r\n  // Slice arc ends at previous slice\r\n  const [startX, startY] = getCoordinatesForPercentage(pieContext.progress);\r\n\r\n  const percentageValue = value / pieContext.total;\r\n\r\n  // Add slice to pie progress\r\n  pieContext.progress += percentageValue;\r\n\r\n  // Slice arc ends at new pie progress\r\n  const [endX, endY] = getCoordinatesForPercentage(pieContext.progress);\r\n\r\n  // Arc rotation fill direction\r\n  const largeArcFlag = percentageValue > 0.5 ? 1 : 0;\r\n\r\n  // Increase hue\r\n  pieContext.hue += percentageValue * 360;\r\n\r\n  // Fallback color for the fill attribute\r\n  const fillColor = fill || `hsl(${pieContext.hue}, 100%, 70%)`;\r\n\r\n  // Add slice values to pie context\r\n  pieContext.slices.push({\r\n    color: fillColor,\r\n    label\r\n  });\r\n\r\n  // Pie slice shape\r\n  const shape = `M ${startX} ${startY} A 1 1 0 ${largeArcFlag} 1 ${endX} ${endY} L 0 0`;\r\n\r\n  return (\r\n    <path {...props} fill={fillColor} d={shape}>\r\n      <title>{label}</title>\r\n    </path>\r\n  );\r\n};\r\n\r\nexport default Slice;\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PieContext } from \"./Pie\";\r\n\r\ntype LegendProps = {\r\n  list?: React.ElementType;\r\n  listItem?: React.ElementType;\r\n};\r\n\r\nconst List = styled.ul`\r\n  list-style: none;\r\n  padding-left: 0;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.6rem;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    width: 1.5rem;\r\n    height: 2rem;\r\n    margin-left: 1rem;\r\n    margin-right: 1rem;\r\n    border-radius: 0.5rem;\r\n    background: ${props => props.color};\r\n  }\r\n`;\r\n\r\nconst Legend: React.FC<LegendProps> = ({\r\n  children,\r\n  list = List,\r\n  listItem = ListItem\r\n}) => {\r\n  const ListComponent = list;\r\n  const ListItemComponent = listItem;\r\n\r\n  const pieContext = useContext(PieContext);\r\n\r\n  const listItems = pieContext.slices.map(({ color, label }) => (\r\n    <ListItemComponent color={color} key={label}>\r\n      {label}\r\n    </ListItemComponent>\r\n  ));\r\n\r\n  return <ListComponent>{listItems}</ListComponent>;\r\n};\r\n\r\nexport default Legend;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Pie, Slices, Slice, PieLegend } from \"../../components/Chart\";\r\n\r\nconst MyStyledPie = styled.div`\r\n  display: flex;\r\n  flex-direction: reverse-column;\r\n\r\n  *:first-child {\r\n    width: 200px;\r\n    margin-right: 2rem;\r\n  }\r\n`;\r\n\r\nconst Settings: React.FC = () => {\r\n  return (\r\n    <Pie>\r\n      <MyStyledPie>\r\n        <Slices hueShift={180}>\r\n          <Slice value={2} label=\"111111111\" />\r\n          <Slice value={3} label=\"222222222\" />\r\n          <Slice value={5} label=\"333333333\" />\r\n          <Slice value={3} label=\"444444444\" />\r\n          <Slice value={8} label=\"555555555\" />\r\n        </Slices>\r\n\r\n        {/* Legend *must* be after your slices */}\r\n        <PieLegend />\r\n      </MyStyledPie>\r\n    </Pie>\r\n  );\r\n};\r\nexport default Settings;\r\n","export { default } from \"./Settings\";\r\n"],"sourceRoot":""}