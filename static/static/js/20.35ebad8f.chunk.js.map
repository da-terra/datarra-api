{"version":3,"sources":["components/general/TagWrapper/styled.ts","components/general/TagWrapper/TagWrapper.tsx","components/general/TagWrapper/index.ts","components/general/EventCard/styled.ts","components/general/EventCard/EventCard.tsx","components/blocks/FeaturedEvents/styled.ts","components/blocks/FeaturedEvents/FeaturedEvents.tsx","components/blocks/FeaturedEvents/index.ts"],"names":["Background","styled","div","HeadingWrapper","Breakpoints","H750","Description","Paragraph","Content","H500","Tag","H1500","TagWrapper","children","tag","heading","description","className","Wrapper","width","WrapperWidth","Small","fontColor","FontColor","Tertiary","fontWeight","FontWeight","Black","Card","props","color","theme","copy","primaryInverted","Month","Day","Title","Heading","CtaButton","LinkButton","EventCard","startDate","title","link","date","parseISO","month","format","locale","nl","day","headingType","HeadingType","Secondary","fontSize","FontSize","italic","Bold","serif","EventsWrapper","EventsList","H1000","BaseEventCard","CtaLink","FeaturedArticles","body","events","map","event","key","uuid"],"mappings":"whCAKO,IAAMA,EAAaC,IAAOC,IAAV,KAKVC,EAAiBF,IAAOC,IAAV,IAIJE,IAAYC,MAKtBC,EAAcL,YAAOM,IAAPN,CAAH,KAKXO,EAAUP,IAAOC,IAAV,IAIGE,IAAYK,MAKtBC,EAAMT,YAAOM,IAAPN,CAAH,IAOOG,IAAYO,OCGpBC,EAvB+B,SAAC,GAAD,IAC5CC,EAD4C,EAC5CA,SACAC,EAF4C,EAE5CA,IACAC,EAH4C,EAG5CA,QACAC,EAJ4C,EAI5CA,YACAC,EAL4C,EAK5CA,UAL4C,OAO5C,kBAACjB,EAAD,CAAYiB,UAAWA,GACrB,kBAACC,EAAA,EAAD,CAASC,MAAOC,IAAaC,OAC1BN,GAAW,kBAACZ,EAAD,KAAiBY,GAC5BC,GAAe,kBAACV,EAAD,KAAcU,GAE9B,kBAACR,EAAD,KACE,kBAACE,EAAD,CAAKY,UAAWC,IAAUC,SAAUC,WAAYC,IAAWC,OACxDb,GAGFD,MCrCT,mC,olCCMO,IAAMe,EAAO3B,IAAOC,IAAV,KAOD,SAAA2B,GAAK,iBAAQA,EAAMC,UACxB,SAAAD,GAAK,OAAIA,EAAME,MAAMC,KAAKC,mBAGxBC,EAAQjC,YAAOM,IAAPN,CAAH,IAIKG,IAAYC,MAKtB8B,EAAMlC,YAAOM,IAAPN,CAAH,IAKOG,IAAYC,MAKtB+B,EAAQnC,YAAOoC,IAAPpC,CAAH,KAKLK,EAAcL,YAAOM,IAAPN,CAAH,KAIXqC,EAAYrC,YAAOsC,IAAPtC,CAAH,KCKPuC,EAlC6B,SAAC,GAOtC,IANLvB,EAMI,EANJA,UACAa,EAKI,EALJA,MACAW,EAII,EAJJA,UACAC,EAGI,EAHJA,MACA1B,EAEI,EAFJA,YACA2B,EACI,EADJA,KAEMC,EAAOC,YAASJ,GAEhBK,EAAQC,YAAOH,EAAM,OAAQ,CAAEI,OAAQC,MACvCC,EAAMH,YAAOH,EAAM,KAAM,CAAEI,OAAQC,MAEzC,OACE,kBAACrB,EAAD,CAAMX,UAAWA,EAAWa,MAAOA,GACjC,kBAACI,EAAD,KAAQY,GAER,kBAACX,EAAD,CAAKV,WAAYC,IAAWC,OAAQuB,GAEpC,kBAACd,EAAD,CAAOe,YAAaC,IAAYC,WAAYX,GAE5C,kBAACpC,EAAD,CAAagD,SAAUC,IAASlC,MAAOmC,QAAM,GAC1CxC,GAGF2B,GACC,kBAACL,EAAD,iBAAeK,EAAf,CAAqBlB,WAAYC,IAAW+B,KAAMC,OAAK,IACpDf,EAAK9B,Y,+zBCpChB,IAGa8C,EAAgB1D,IAAOC,IAAV,KAKb0D,EAAa3D,IAAOC,IAAV,IARC,EAYDE,IAAYyD,MAXX,EAeDzD,IAAYC,MAKtBmC,EAAYvC,YAAO6D,EAAP7D,CAAH,IArBE,EAyBDG,IAAYyD,MAxBX,EA4BDzD,IAAYC,MAKtB0D,EAAU9D,YAAOsC,IAAPtC,CAAH,IASGG,IAAYK,MCUpBuD,EAhC2C,SAAC,GAMpD,IALLtB,EAKI,EALJA,MACAuB,EAII,EAJJA,KACAnD,EAGI,EAHJA,IACAoD,EAEI,EAFJA,OACAvB,EACI,EADJA,KAEM5B,EACJ,kBAACsB,EAAA,EAAD,CAASc,YAAaC,IAAYC,UAAW5B,WAAYC,IAAWC,OACjEe,GAIL,OACE,kBAAC9B,EAAA,EAAD,CAAYG,QAASA,EAASC,YAAaiD,EAAMnD,IAAKA,GACpD,kBAAC6C,EAAD,KACE,kBAACC,EAAD,KACGM,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,iBAAeA,EAAf,CAAsBC,IAAKD,EAAME,YAIpC3B,GACC,kBAACoB,EAAD,iBAAapB,EAAb,CAAmBe,OAAK,IACrBf,EAAK9B,aCpDlB","file":"static/js/20.35ebad8f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { Breakpoints } from \"../../../data/style/variables\";\r\nimport Paragraph from \"../Paragraph\";\r\nexport { default as Wrapper } from \"../Wrapper\";\r\n\r\nexport const Background = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const HeadingWrapper = styled.div`\r\n  padding-top: 10.2rem;\r\n  padding-bottom: 2.4rem;\r\n\r\n  @media (max-width: ${Breakpoints.H750}) {\r\n    padding-top: 6.4rem;\r\n  }\r\n`;\r\n\r\nexport const Description = styled(Paragraph)`\r\n  margin-bottom: 4.2rem;\r\n  max-width: 75%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  padding-bottom: 10.2rem;\r\n\r\n  @media (max-width: ${Breakpoints.H500}) {\r\n    padding-bottom: 4.6rem;\r\n  }\r\n`;\r\n\r\nexport const Tag = styled(Paragraph)`\r\n  position: absolute;\r\n  text-transform: uppercase;\r\n  top: 0;\r\n  left: 0;\r\n  transform: translate(calc(-100% - 5.2rem), 0);\r\n\r\n  @media (max-width: ${Breakpoints.H1500}) {\r\n    display: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { WrapperWidth } from \"../Wrapper\";\r\nimport { FontColor, FontWeight } from \"../../../data/style/variables\";\r\nimport {\r\n  Background,\r\n  Wrapper,\r\n  HeadingWrapper,\r\n  Description,\r\n  Content,\r\n  Tag\r\n} from \"./styled\";\r\n\r\ntype TagWrapperProps = {\r\n  tag: React.ReactNode;\r\n  heading?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n};\r\n\r\nconst TagWrapper: React.FC<TagWrapperProps> = ({\r\n  children,\r\n  tag,\r\n  heading,\r\n  description,\r\n  className\r\n}) => (\r\n  <Background className={className}>\r\n    <Wrapper width={WrapperWidth.Small}>\r\n      {heading && <HeadingWrapper>{heading}</HeadingWrapper>}\r\n      {description && <Description>{description}</Description>}\r\n\r\n      <Content>\r\n        <Tag fontColor={FontColor.Tertiary} fontWeight={FontWeight.Black}>\r\n          {tag}\r\n        </Tag>\r\n\r\n        {children}\r\n      </Content>\r\n    </Wrapper>\r\n  </Background>\r\n);\r\n\r\nexport default TagWrapper;\r\n","export { default } from \"./TagWrapper\";\r\n","import styled from \"styled-components\";\r\nimport { Breakpoints } from \"../../../data/style/variables\";\r\nimport { LinkButton } from \"../Button\";\r\nimport Paragraph from \"../Paragraph\";\r\nimport Heading from \"../Heading\";\r\n\r\nexport const Card = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  border-radius: 1rem;\r\n  cursor: pointer;\r\n  padding: 2.6rem;\r\n  background: ${props => `#${props.color}`};\r\n  color: ${props => props.theme.copy.primaryInverted};\r\n`;\r\n\r\nexport const Month = styled(Paragraph)`\r\n  text-transform: capitalize;\r\n  font-size: 3rem;\r\n\r\n  @media (max-width: ${Breakpoints.H750}) {\r\n    font-size: 2.5rem;\r\n  }\r\n`;\r\n\r\nexport const Day = styled(Paragraph)`\r\n  font-size: 12.2rem;\r\n  line-height: 1;\r\n  margin-top: 0.5rem;\r\n\r\n  @media (max-width: ${Breakpoints.H750}) {\r\n    font-size: 6.4rem;\r\n  }\r\n`;\r\n\r\nexport const Title = styled(Heading)`\r\n  padding: 2.5rem 0 1.5rem;\r\n  margin-top: auto;\r\n`;\r\n\r\nexport const Description = styled(Paragraph)`\r\n  margin-bottom: 4rem;\r\n`;\r\n\r\nexport const CtaButton = styled(LinkButton)`\r\n  margin-left: auto;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { parseISO, format } from \"date-fns\";\r\nimport { nl } from \"date-fns/locale\";\r\nimport { HeadingType } from \"../Heading\";\r\nimport { FontSize, FontWeight } from \"../../../data/style/variables\";\r\nimport { Card, Month, Day, Title, Description, CtaButton } from \"./styled\";\r\n\r\ntype EventCardProps = {\r\n  className?: string;\r\n  color: string;\r\n  startDate: string;\r\n  title: string;\r\n  description: string;\r\n  link?: ILink;\r\n};\r\n\r\nconst EventCard: React.FC<EventCardProps> = ({\r\n  className,\r\n  color,\r\n  startDate,\r\n  title,\r\n  description,\r\n  link\r\n}) => {\r\n  const date = parseISO(startDate);\r\n\r\n  const month = format(date, \"MMMM\", { locale: nl });\r\n  const day = format(date, \"dd\", { locale: nl });\r\n\r\n  return (\r\n    <Card className={className} color={color}>\r\n      <Month>{month}</Month>\r\n\r\n      <Day fontWeight={FontWeight.Black}>{day}</Day>\r\n\r\n      <Title headingType={HeadingType.Secondary}>{title}</Title>\r\n\r\n      <Description fontSize={FontSize.Small} italic>\r\n        {description}\r\n      </Description>\r\n\r\n      {link && (\r\n        <CtaButton {...link} fontWeight={FontWeight.Bold} serif>\r\n          {link.children}\r\n        </CtaButton>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EventCard;\r\n","import styled from \"styled-components\";\r\nimport BaseEventCard from \"../../general/EventCard\";\r\nimport { LinkButton } from \"../../general/Button\";\r\nimport { Breakpoints } from \"../../../data/style/variables\";\r\nexport { default as TagWrapper } from \"../../general/TagWrapper\";\r\nexport { default as Heading } from \"../../general/Heading\";\r\n\r\nconst h1500MarginSize = 4;\r\nconst h1000MarginSize = 2;\r\n\r\nexport const EventsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const EventsList = styled.div`\r\n  display: flex;\r\n  margin: -${h1500MarginSize}rem;\r\n\r\n  @media (max-width: ${Breakpoints.H1000}) {\r\n    margin: -${h1000MarginSize}rem;\r\n  }\r\n\r\n  @media (max-width: ${Breakpoints.H750}) {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport const EventCard = styled(BaseEventCard)`\r\n  margin: ${h1500MarginSize}rem;\r\n  max-width: 45rem;\r\n\r\n  @media (max-width: ${Breakpoints.H1000}) {\r\n    margin: ${h1000MarginSize}rem;\r\n  }\r\n\r\n  @media (max-width: ${Breakpoints.H750}) {\r\n    max-width: none;\r\n  }\r\n`;\r\n\r\nexport const CtaLink = styled(LinkButton)`\r\n  margin-left: auto;\r\n  margin-top: 6.4rem;\r\n  text-decoration: underline;\r\n\r\n  &:hover {\r\n    text-decoration: none;\r\n  }\r\n\r\n  @media (max-width: ${Breakpoints.H500}) {\r\n    margin-top: 2.4rem;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { HeadingType } from \"../../general/Heading\";\r\nimport { FontWeight } from \"../../../data/style/variables\";\r\nimport {\r\n  TagWrapper,\r\n  Heading,\r\n  EventsWrapper,\r\n  EventsList,\r\n  EventCard,\r\n  CtaLink\r\n} from \"./styled\";\r\n\r\ntype Event = {\r\n  uuid: string;\r\n  color: string;\r\n  startDate: string;\r\n  title: string;\r\n  description: string;\r\n};\r\n\r\ntype FeaturedArticlesProps = {\r\n  title: string;\r\n  body: string;\r\n  tag: React.ReactNode;\r\n  events: Event[];\r\n  link: ILink;\r\n};\r\n\r\nconst FeaturedArticles: React.FC<FeaturedArticlesProps> = ({\r\n  title,\r\n  body,\r\n  tag,\r\n  events,\r\n  link\r\n}) => {\r\n  const heading = (\r\n    <Heading headingType={HeadingType.Secondary} fontWeight={FontWeight.Black}>\r\n      {title}\r\n    </Heading>\r\n  );\r\n\r\n  return (\r\n    <TagWrapper heading={heading} description={body} tag={tag}>\r\n      <EventsWrapper>\r\n        <EventsList>\r\n          {events.map(event => (\r\n            <EventCard {...event} key={event.uuid} />\r\n          ))}\r\n        </EventsList>\r\n\r\n        {link && (\r\n          <CtaLink {...link} serif>\r\n            {link.children}\r\n          </CtaLink>\r\n        )}\r\n      </EventsWrapper>\r\n    </TagWrapper>\r\n  );\r\n};\r\n\r\nexport default FeaturedArticles;\r\n","export { default } from \"./FeaturedEvents\";\r\n"],"sourceRoot":""}