{"version":3,"sources":["components/blocks/Hero/styled.ts","components/blocks/Hero/Hero.tsx","components/blocks/Hero/index.ts"],"names":["Background","styled","div","props","theme","background","accent","copy","primaryInverted","Content","Wrapper","Breakpoints","H1000","H500","HeroHeader","H750","NavigationLinks","NavigationLink","LinkButton","CtaGroup","Slogan","Heading","ButtonWrapper","TargetButton","SolidButton","h750MediaQuery","Hero","navigationLinks","slogan","buttons","storage","useContext","Context","x","y","radius","MediaQuery","mediaQuery","fallback","Logo","size","LogoSize","Normal","showName","Large","map","uuid","link","key","serif","children","fontWeight","FontWeight","Black","headingType","HeadingType","Secondary","targetGroup","inverted","muted","getValue","StorageKey","TargetGroup","onClick","setValue"],"mappings":"s3DASO,IAAMA,EAAaC,IAAOC,IAAV,KACP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAAWC,UACrC,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAKC,mBAQxBC,EAAUR,YAAOS,IAAPT,CAAH,IAOGU,IAAYC,MAKZD,IAAYE,MAMtBC,EAAab,IAAOC,IAAV,IAIAS,IAAYI,MAKtBC,EAAkBf,IAAOC,IAAV,KAMfe,EAAiBhB,YAAOiB,IAAPjB,CAAH,KAcdkB,EAAWlB,IAAOC,IAAV,KAIRkB,EAASnB,YAAOoB,IAAPpB,CAAH,KAMNqB,EAAgBrB,IAAOC,IAAV,KAMbqB,EAAetB,YAAOuB,IAAPvB,CAAH,KCpDnBwB,EAAc,sBAAkBd,IAAYE,KAA9B,KAgELa,EA9DmB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtDC,EAAUC,qBAAWC,KAE3B,OACE,kBAAChC,EAAD,KACE,kBAAC,IAAD,CAAQiC,GAAI,GAAIC,GAAI,GAAIC,OAAQ,MAEhC,kBAAC1B,EAAD,KACE,kBAACK,EAAD,KACE,kBAACsB,EAAA,EAAD,CACEC,WAAYZ,EACZa,SAAU,kBAAM,kBAACC,EAAA,EAAD,CAAMC,KAAMC,IAASC,OAAQC,UAAQ,MAErD,kBAACJ,EAAA,EAAD,CAAMC,KAAMC,IAASG,MAAOD,UAAQ,KAGrChB,GACC,kBAACX,EAAD,KACGW,EAAgBkB,KAAI,gBAAGC,EAAH,EAAGA,KAASC,EAAZ,+BACnB,kBAAC9B,EAAD,iBAAoB8B,EAApB,CAA0BC,IAAKF,EAAMG,OAAK,IACvCF,EAAKG,eAOhB,kBAAC/B,EAAD,KACE,kBAACiB,EAAA,EAAD,CACEC,WAAYZ,EACZa,SAAU,kBACR,kBAAClB,EAAD,CACE+B,WAAYC,IAAWC,MACvBC,YAAaC,IAAYC,WAExB5B,KAIL,kBAACR,EAAD,CAAQ+B,WAAYC,IAAWC,OAAQzB,IAGzC,kBAACN,EAAD,KACGO,EAAQgB,KAAI,gBAAGK,EAAH,EAAGA,SAAUO,EAAb,EAAaA,YAAgBtD,EAA7B,iDACX,kBAACoB,EAAD,CACEmC,UAAQ,EACRC,MAAO7B,EAAQ8B,SAASC,IAAWC,eAAiBL,EACpDM,QAAS,kBACPjC,EAAQkC,SAASH,IAAWC,YAAaL,IAE3CT,IAAK7C,EAAM2C,MAEVI,WCpFjB","file":"static/js/26.31b7bf56.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport Wrapper from \"../../general/Wrapper\";\r\nimport { SolidButton, LinkButton } from \"../../general/Button\";\r\nimport Heading from \"../../general/Heading\";\r\nimport { Breakpoints } from \"../../../data/style/variables\";\r\n\r\nexport { default as Logo } from \"../../general/Logo\";\r\nexport { Circle } from \"../../../util/layout\";\r\n\r\nexport const Background = styled.div`\r\n  background: ${props => props.theme.background.accent};\r\n  color: ${props => props.theme.copy.primaryInverted};\r\n  min-height: 65vh;\r\n  position: relative;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Content = styled(Wrapper)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 0 auto;\r\n  padding-top: 6.4rem;\r\n  padding-bottom: 6.4rem;\r\n\r\n  @media (max-width: ${Breakpoints.H1000}) {\r\n    padding-top: 4.6rem;\r\n    padding-bottom: 4.6rem;\r\n  }\r\n\r\n  @media (max-width: ${Breakpoints.H500}) {\r\n    padding-top: 2rem;\r\n    padding-bottom: 2rem;\r\n  }\r\n`;\r\n\r\nexport const HeroHeader = styled.div`\r\n  display: flex;\r\n  margin-bottom: 15rem;\r\n\r\n  @media (max-width: ${Breakpoints.H750}) {\r\n    margin-bottom: 5rem;\r\n  }\r\n`;\r\n\r\nexport const NavigationLinks = styled.div`\r\n  display: flex;\r\n  margin-left: auto;\r\n  margin-bottom: auto;\r\n`;\r\n\r\nexport const NavigationLink = styled(LinkButton)`\r\n  text-decoration: none;\r\n  pointer-events: all;\r\n  opacity: 0.5;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n\r\n  &:not(:first-child) {\r\n    margin-left: 6.2rem;\r\n  }\r\n`;\r\n\r\nexport const CtaGroup = styled.div`\r\n  margin: auto 0;\r\n`;\r\n\r\nexport const Slogan = styled(Heading)`\r\n  position: relative;\r\n  white-space: pre-line;\r\n  margin: 4.2rem 0;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  max-width: 70rem;\r\n`;\r\n\r\nexport const TargetButton = styled(SolidButton)`\r\n  white-space: nowrap;\r\n  margin-bottom: 2rem;\r\n\r\n  &:not(:last-child) {\r\n    margin-right: 4.5rem;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { FontWeight, Breakpoints } from \"../../../data/style/variables\";\r\nimport { Context, StorageKey } from \"../../context/StorageManager\";\r\nimport MediaQuery from \"../../util/MediaQuery\";\r\nimport { LogoSize } from \"../../general/Logo\";\r\nimport { HeadingType } from \"../../general/Heading\";\r\nimport {\r\n  Background,\r\n  Circle,\r\n  HeroHeader,\r\n  Logo,\r\n  NavigationLinks,\r\n  NavigationLink,\r\n  Content,\r\n  CtaGroup,\r\n  Slogan,\r\n  ButtonWrapper,\r\n  TargetButton\r\n} from \"./styled\";\r\n\r\ntype HeroProps = {\r\n  navigationLinks: (ILink & { uuid: string })[];\r\n  slogan: string;\r\n  buttons: {\r\n    uuid: string;\r\n    targetGroup: string;\r\n    children: string;\r\n  }[];\r\n};\r\n\r\nconst h750MediaQuery = `(min-width: ${Breakpoints.H500})`;\r\n\r\nconst Hero: React.FC<HeroProps> = ({ navigationLinks, slogan, buttons }) => {\r\n  const storage = useContext(Context);\r\n\r\n  return (\r\n    <Background>\r\n      <Circle x={-33} y={-45} radius={200} />\r\n\r\n      <Content>\r\n        <HeroHeader>\r\n          <MediaQuery\r\n            mediaQuery={h750MediaQuery}\r\n            fallback={() => <Logo size={LogoSize.Normal} showName />}\r\n          >\r\n            <Logo size={LogoSize.Large} showName />\r\n          </MediaQuery>\r\n\r\n          {navigationLinks && (\r\n            <NavigationLinks>\r\n              {navigationLinks.map(({ uuid, ...link }) => (\r\n                <NavigationLink {...link} key={uuid} serif>\r\n                  {link.children}\r\n                </NavigationLink>\r\n              ))}\r\n            </NavigationLinks>\r\n          )}\r\n        </HeroHeader>\r\n\r\n        <CtaGroup>\r\n          <MediaQuery\r\n            mediaQuery={h750MediaQuery}\r\n            fallback={() => (\r\n              <Slogan\r\n                fontWeight={FontWeight.Black}\r\n                headingType={HeadingType.Secondary}\r\n              >\r\n                {slogan}\r\n              </Slogan>\r\n            )}\r\n          >\r\n            <Slogan fontWeight={FontWeight.Black}>{slogan}</Slogan>\r\n          </MediaQuery>\r\n\r\n          <ButtonWrapper>\r\n            {buttons.map(({ children, targetGroup, ...props }) => (\r\n              <TargetButton\r\n                inverted\r\n                muted={storage.getValue(StorageKey.TargetGroup) !== targetGroup}\r\n                onClick={() =>\r\n                  storage.setValue(StorageKey.TargetGroup, targetGroup)\r\n                }\r\n                key={props.uuid}\r\n              >\r\n                {children}\r\n              </TargetButton>\r\n            ))}\r\n          </ButtonWrapper>\r\n        </CtaGroup>\r\n      </Content>\r\n    </Background>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","export { default } from \"./Hero\";\r\n"],"sourceRoot":""}