{"version":3,"sources":["components/general/RichTextEditor/elements/ParagraphNode/styled.ts","components/general/RichTextEditor/elements/ParagraphNode/ParagraphNode.tsx","components/general/RichTextEditor/elements/index.tsx","components/general/RichTextEditor/marks/index.tsx","components/general/RichTextEditor/RichTextEditor.tsx","components/general/RichTextEditor/index.ts","components/blocks/RichText/RichText.tsx","components/blocks/RichText/index.ts"],"names":["StyledParagraph","styled","Paragraph","ParagraphNode","children","attributes","elements","paragraph","fallbackElement","props","Component","element","type","console","log","Mark","mark","defaultValue","text","marks","RichTextEditor","value","readOnly","editor","onChange","useMemo","withReact","createEditor","withHistory","JSON","stringify","renderElement","renderMark","RichText","nodes","Wrapper","width","WrapperWidth","Smaller"],"mappings":"+VAGO,IAAMA,EAAkBC,YAAOC,IAAPD,CAAH,KCMbE,EALqC,SAAC,GAAD,IAClDC,EADkD,EAClDA,SACAC,EAFkD,EAElDA,WAFkD,OAG9C,kBAACL,EAAoBK,EAAaD,ICAlCE,EAAgB,CACpBC,UAAWJ,GAGPK,EAAkBL,EAET,WAACM,GACd,IAAMC,EAAYJ,EAASG,EAAME,QAAQC,OAASJ,EAIlD,OAFAK,QAAQC,IAAIL,GAEL,kBAACC,EAAcD,ICMTM,EAnBQ,SAAC,GAIjB,IAHLV,EAGI,EAHJA,WACAD,EAEI,EAFJA,SAGA,OADI,EADJY,KAEaJ,MACX,IAAK,OACH,OAAO,2BAAYP,EAAaD,GAClC,IAAK,OACH,OAAO,yBAAUC,EAAaD,GAChC,IAAK,SACH,OAAO,uBAAQC,EAAaD,GAC9B,IAAK,aACH,OAAO,sBAAOC,EAAaD,GAG/B,OAAO,yBAAUC,EAAaD,ICd1Ba,EAAuB,CAC3B,CACEL,KAAM,YACNR,SAAU,CACR,CACEc,KAAM,oBACNC,MAAO,IAET,CACED,KAAM,OACNC,MAAO,CAAC,CAAEP,KAAM,UAElB,CACEM,KAAM,UACNC,MAAO,IAET,CACED,KAAM,OACNC,MAAO,CAAC,CAAEP,KAAM,YAElB,CACEM,KAAM,kBACNC,MAAO,IAET,CACED,KAAM,aACNC,MAAO,CAAC,CAAEP,KAAM,UAElB,CACEM,KAAM,IACNC,MAAO,MAIb,CACEP,KAAM,YACNR,SAAU,CACR,CACEc,KACE,yEACFC,MAAO,IAET,CACED,KAAM,OACNC,MAAO,CAAC,CAAEP,KAAM,UAElB,CACEM,KACE,qFACFC,MAAO,MAIb,CACEP,KAAM,cACNR,SAAU,CACR,CACEc,KAAM,gBACNC,MAAO,MAIb,CACEP,KAAM,YACNR,SAAU,CACR,CACEc,KAAM,2BACNC,MAAO,OAwCAC,EA5BuC,SAAC,GAIhD,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SAGMC,GADF,EADJC,SAEeC,mBAAQ,WACrB,OAAIH,EACKI,YAAUC,eAGZC,YAAYF,YAAUC,kBAC5B,CAACL,KAEJ,OACE,kBAAC,IAAD,CACEC,OAAQA,EACRN,aAAcI,GAASJ,EACvBO,SAAU,SAAAH,GAAK,OAAIR,QAAQC,IAAIe,KAAKC,UAAUT,MAE9C,kBAAC,IAAD,CACEC,SAAUA,EACVS,cAAeA,EACfC,WAAYA,MC5GpB,mC,6ECkBeC,EAN2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,kBAACC,EAAA,EAAD,CAASC,MAAOC,IAAaC,SAC3B,kBAAClB,EAAA,EAAD,CAAgBC,MAAOa,EAAOZ,UAAQ,MCd1C","file":"static/js/22.eb413ecf.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport Paragraph from \"../../../Paragraph\";\r\n\r\nexport const StyledParagraph = styled(Paragraph)`\r\n  margin-bottom: 2rem;\r\n\r\n  &:last-child {\r\n    margin-bottom: 10rem;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { RenderElementProps } from \"slate-react\";\r\nimport { StyledParagraph } from \"./styled\";\r\n\r\nconst ParagraphNode: React.FC<RenderElementProps> = ({\r\n  children,\r\n  attributes\r\n}) => <StyledParagraph {...attributes}>{children}</StyledParagraph>;\r\n\r\nexport default ParagraphNode;\r\n","import React from \"react\";\r\nimport { RenderElementProps } from \"slate-react\";\r\n\r\n//\r\nimport ParagraphNode from \"./ParagraphNode\";\r\n\r\n// List of all elements with a reference to their element type name\r\nconst elements: any = {\r\n  paragraph: ParagraphNode\r\n};\r\n\r\nconst fallbackElement = ParagraphNode;\r\n\r\nexport default (props: RenderElementProps): JSX.Element => {\r\n  const Component = elements[props.element.type] || fallbackElement;\r\n\r\n  console.log(props);\r\n\r\n  return <Component {...props} />;\r\n};\r\n","import React from \"react\";\r\nimport { RenderMarkProps } from \"slate-react\";\r\n\r\ntype MarkFunc = ((props: RenderMarkProps) => JSX.Element) | undefined;\r\n\r\nconst Mark: MarkFunc = ({\r\n  attributes,\r\n  children,\r\n  mark\r\n}) => {\r\n  switch (mark.type) {\r\n    case \"bold\":\r\n      return <strong {...attributes}>{children}</strong>;\r\n    case \"code\":\r\n      return <code {...attributes}>{children}</code>;\r\n    case \"italic\":\r\n      return <em {...attributes}>{children}</em>;\r\n    case \"underlined\":\r\n      return <u {...attributes}>{children}</u>;\r\n  }\r\n\r\n  return <span {...attributes}>{children}</span>;\r\n};\r\n\r\nexport default Mark;\r\n","import React, { useMemo } from \"react\";\r\nimport { createEditor, Node, Operation } from \"slate\";\r\nimport { withHistory } from \"slate-history\";\r\nimport { Slate, Editable, withReact } from \"slate-react\";\r\nimport renderElement from \"./elements\";\r\nimport renderMark from \"./marks\";\r\n\r\nconst defaultValue: Node[] = [\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      {\r\n        text: \"This is editable \",\r\n        marks: []\r\n      },\r\n      {\r\n        text: \"rich\",\r\n        marks: [{ type: \"bold\" }]\r\n      },\r\n      {\r\n        text: \" text, \",\r\n        marks: []\r\n      },\r\n      {\r\n        text: \"much\",\r\n        marks: [{ type: \"italic\" }]\r\n      },\r\n      {\r\n        text: \" better than a \",\r\n        marks: []\r\n      },\r\n      {\r\n        text: \"<textarea>\",\r\n        marks: [{ type: \"code\" }]\r\n      },\r\n      {\r\n        text: \"!\",\r\n        marks: []\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      {\r\n        text:\r\n          \"Since it's rich text, you can do things like turn a selection of text \",\r\n        marks: []\r\n      },\r\n      {\r\n        text: \"bold\",\r\n        marks: [{ type: \"bold\" }]\r\n      },\r\n      {\r\n        text:\r\n          \", or add a semantically rendered block quote in the middle of the page, like this:\",\r\n        marks: []\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: \"block-quote\",\r\n    children: [\r\n      {\r\n        text: \"A wise quote.\",\r\n        marks: []\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: \"paragraph\",\r\n    children: [\r\n      {\r\n        text: \"Try it out for yourself!\",\r\n        marks: []\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\ntype RichTextEditorProps = {\r\n  value?: Node[];\r\n  readOnly?: boolean;\r\n  onChange?: ((children: Node[], operations: Operation[]) => void) | undefined;\r\n};\r\n\r\nconst RichTextEditor: React.FC<RichTextEditorProps> = ({\r\n  value,\r\n  readOnly,\r\n  onChange\r\n}) => {\r\n  const editor = useMemo(() => {\r\n    if (readOnly) {\r\n      return withReact(createEditor());\r\n    }\r\n\r\n    return withHistory(withReact(createEditor()));\r\n  }, [readOnly]);\r\n\r\n  return (\r\n    <Slate\r\n      editor={editor}\r\n      defaultValue={value || defaultValue}\r\n      onChange={value => console.log(JSON.stringify(value))}\r\n    >\r\n      <Editable\r\n        readOnly={readOnly}\r\n        renderElement={renderElement}\r\n        renderMark={renderMark}\r\n      />\r\n    </Slate>\r\n  );\r\n};\r\n\r\nexport default RichTextEditor;\r\n","export { default } from \"./RichTextEditor\";\r\n","import React from \"react\";\r\nimport { Node } from \"slate\";\r\nimport { WrapperWidth } from \"../../general/Wrapper\";\r\nimport { Wrapper, RichTextEditor } from \"./styled\";\r\n\r\ntype RichTextProps = {\r\n  nodes: Node[];\r\n};\r\n\r\n/**\r\n * Read-only Slate editor\r\n */\r\nconst RichText: React.FC<RichTextProps> = ({ nodes }) => (\r\n  <Wrapper width={WrapperWidth.Smaller}>\r\n    <RichTextEditor value={nodes} readOnly />\r\n  </Wrapper>\r\n);\r\n\r\nexport default RichText;\r\n","export { default } from \"./RichText\";\r\n"],"sourceRoot":""}