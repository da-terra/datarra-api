{"version":3,"sources":["pages/QuickScan/steps/QuickScanResult/QuickScanResult.tsx","pages/QuickScan/steps/QuickScanResult/index.ts"],"names":["query","QuickScanResult","quickScan","useContext","QuickScanContext","storage","StorageContext","useMutation","sendResult","data","error","useEffect","answers","Object","keys","result","map","key","questionId","value","variables","target","getValue","StorageKey","TargetGroup","setValue","QuickScanResultUuid","createQuickScanResult","uuid"],"mappings":"qNAUMA,EAAK,87EAsCIC,EApCmB,WAChC,IAAMC,EAAYC,qBAAWC,KACvBC,EAAUF,qBAAWG,KAFW,EAIAC,YAAYP,GAJZ,mBAI/BQ,EAJ+B,YAIjBC,EAJiB,EAIjBA,KAAMC,EAJW,EAIXA,MAyB3B,GAvBAC,qBAAU,WACR,IAAMC,EAAUC,OAAOC,KAAKZ,EAAUa,OAAOH,SAASI,KAAI,SAAAC,GAAG,MAAK,CAChEC,WAAYD,EACZE,MAAOjB,EAAUa,OAAOH,QAAQK,OAG5BG,EAAc,eACflB,EAAUa,OADK,CAElBM,OAAQhB,EAAQiB,SAASC,IAAWC,aACpCZ,YAGFJ,EAAW,CAAEY,gBACZ,CAACf,EAASH,EAAWM,IAEpBC,GACFJ,EAAQoB,SACNF,IAAWG,oBACXjB,EAAKkB,sBAAsBC,MAC3B,GAIAlB,EACF,MAAMA,EAGR,OAAO,kBAAC,IAAD,OC7CT","file":"static/js/30.25de4528.chunk.js","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { loader } from \"graphql.macro\";\r\nimport {\r\n  Context as StorageContext,\r\n  StorageKey\r\n} from \"../../../../components/context/StorageManager\";\r\nimport { Context as QuickScanContext } from \"../../QuickScan\";\r\nimport { LoadingScreen } from \"./styled\";\r\n\r\nconst query = loader(\"./createQuickScanResult.graphql\");\r\n\r\nconst QuickScanResult: React.FC = () => {\r\n  const quickScan = useContext(QuickScanContext);\r\n  const storage = useContext(StorageContext);\r\n\r\n  const [sendResult, { data, error }] = useMutation(query);\r\n\r\n  useEffect(() => {\r\n    const answers = Object.keys(quickScan.result.answers).map(key => ({\r\n      questionId: key,\r\n      value: quickScan.result.answers[key]\r\n    }));\r\n\r\n    const variables: any = {\r\n      ...quickScan.result,\r\n      target: storage.getValue(StorageKey.TargetGroup),\r\n      answers\r\n    };\r\n\r\n    sendResult({ variables });\r\n  }, [storage, quickScan, sendResult]);\r\n\r\n  if (data) {\r\n    storage.setValue(\r\n      StorageKey.QuickScanResultUuid,\r\n      data.createQuickScanResult.uuid,\r\n      true\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    throw error;\r\n  }\r\n\r\n  return <LoadingScreen />;\r\n};\r\n\r\nexport default QuickScanResult;\r\n","export { default } from \"./QuickScanResult\";\r\n"],"sourceRoot":""}